<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.kathrynhuxtable.maven.skins</groupId>
	<artifactId>green-site-skin</artifactId>
	<packaging>jar</packaging>
	<version>1.1</version>
	<prerequisites>
		<maven>2.2.1</maven>
	</prerequisites>
	<name>green-site-skin</name>
	<description>
		A Maven skin to provide a consistent look across Kathryn Huxtable's projects.
		(But anyone can use it. It doesn't personalize the site.)
    </description>
	<inceptionYear>2010</inceptionYear>
	<url>http://khuxtable.github.com/green-site-skin</url>
	<developers>
		<developer>
			<id>khuxtable</id>
			<name>Kathryn Huxtable</name>
			<email>kathryn@kathrynhuxtable.org</email>
			<url>http://www.kathrynhuxtable.org</url>
			<organization>kathrynhuxtable.org</organization>
			<organizationUrl>http://www.kathrynhuxtable.org</organizationUrl>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>-6</timezone>
		</developer>
	</developers>
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>LICENSE.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<organization>
		<name>kathrynhuxtable.org</name>
		<url>http://www.kathrynhuxtable.org</url>
	</organization>
	<issueManagement>
		<system>GitHub</system>
		<url>http://github.com/khuxtable/green-site-skin/issues</url>
	</issueManagement>
	<mailingLists>
		<mailingList>
			<name>Kathryn Huxtable's Projects</name>
			<subscribe>kathryn-huxtable-projects+subscribe@googlegroups.com</subscribe>
			<unsubscribe>kathryn-huxtable-projects+unsubscribe@googlegroups.com</unsubscribe>
			<post>kathryn-huxtable-projects@googlegroups.com</post>
			<archive>http://groups.google.com/group/kathryn-huxtable-projects</archive>
		</mailingList>
	</mailingLists>
	<distributionManagement>
		<!-- Site to deploy releases to. -->
		<repository>
			<id>ossrh</id>
			<url>http://oss.sonatype.org/service/local/staging/deploy/maven2</url>
		</repository>
		<!-- Site to deploy snapshots to. -->
		<snapshotRepository>
			<id>ossrh</id>
			<url>http://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<!--
			Site to deploy site documentation to. Note that this overwrites the previous site documentation.
			But if someone checks out the project, they can rebuild the site documentation, so we're not too
			concerned.
		-->
		<site>
			<id>github-site</id>
			<url>gitsite:git@github.com/khuxtable/green-site-skin.git</url>
		</site>
	</distributionManagement>
	<scm>
		<connection>scm:git:git://github.com/khuxtable/green-site-skin.git</connection>
		<developerConnection>scm:git:git+ssh://git@github.com/khuxtable/green-site-skin.git</developerConnection>
		<url>http://github.com/khuxtable/green-site-skin</url>
	</scm>
	<build>
		<resources>
			<resource>
				<directory>${basedir}/src/main/resources</directory>
			</resource>
			<resource>
			    <targetPath>META-INF</targetPath>
				<directory>${basedir}</directory>
				<includes>
					<include>LICENSE.txt</include>
					<include>README.txt</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.0</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-provider-gitexe</artifactId>
						<version>1.3</version>
					</dependency>
				</dependencies>
				<configuration>
					<goals>deploy</goals>
					<mavenExecutorId>forked-path</mavenExecutorId>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-scm-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-provider-gitexe</artifactId>
						<version>1.3</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<locales>en</locales>
					<outputEncoding>${project.build.sourceEncoding}</outputEncoding>
				</configuration>
			</plugin>
			<!--
				Configure the docbkx plugin, which is a more fully featured DocBook converter than the one
				included in Doxia. In particular, it does language-based syntax highlighting in programlisting
				elements. This is run in the pre-site phase and generates its output to the html directory of
				the generated site directory.
			-->
			<plugin>
				<groupId>com.agilejava.docbkx</groupId>
				<artifactId>docbkx-maven-plugin</artifactId>
				<version>2.0.10</version>
				<executions>
					<execution>
						<goals>
							<goal>generate-xhtml</goal>
						</goals>
						<phase>pre-site</phase>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>net.sf.docbook</groupId>
						<artifactId>docbook-xml</artifactId>
						<version>5.0-all</version>
						<classifier>resources</classifier>
						<type>zip</type>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<configuration>
					<chunkedOutput>false</chunkedOutput>
					<sourceDirectory>${basedir}/src/site/docbook</sourceDirectory>
					<includes>**/*.xml,**/*.xml.vm</includes>
					<targetDirectory>${project.build.directory}/generated-site/docbook-xhtml</targetDirectory>
					<generateMetaAbstract>false</generateMetaAbstract>
					<generateToc>false</generateToc>
					<highlightSource>true</highlightSource>
					<highlightDefaultLanguage />
					<xhtmlCustomization>${basedir}/src/site/xsl/html.xsl</xhtmlCustomization>
					<htmlCustomization>${basedir}/src/site/xsl/html.xsl</htmlCustomization>
					<imgSrcPath>./</imgSrcPath>
					<htmlCellSpacing>2</htmlCellSpacing>
					<htmlCellPadding>2</htmlCellPadding>
					<suppressHeaderNavigation>1</suppressHeaderNavigation>
					<suppressFooterNavigation>1</suppressFooterNavigation>
					<tableBordersWithCss>true</tableBordersWithCss>
					<tableFrameBorderThickness>0</tableFrameBorderThickness>
					<tableCellBorderThickness>0</tableCellBorderThickness>
					<targetFileExtension>html</targetFileExtension>
					<useExtensions>true</useExtensions>
					<calloutsExtension>true</calloutsExtension>
				</configuration>
			</plugin>
			<!--
				Configure the HTML Filter Site plugin. This runs *after* the docbkx plugin in the pre-site phase
				and runs Velocity on the files and makes them look more like Doxia-generated files without
				stripping all the useful DocBook formatting like Doxia does. It first runs JTidy to make the
				files XHTML-compliant. When version 2.0.10 of the docbkx plugin is released we can generate
				XHTML and won't need the "tidy" goal.
			-->
			<plugin>
				<groupId>org.kathrynhuxtable.maven.plugins</groupId>
				<artifactId>htmlfilter-site-maven-plugin</artifactId>
				<version>0.3.3</version>
				<executions>
					<execution>
						<goals>
							<goal>merge</goal>
						</goals>
						<phase>pre-site</phase>
					</execution>
				</executions>
				<configuration>
					<sourceDirectory>${project.build.directory}/generated-site/docbook-xhtml</sourceDirectory>
					<filePattern>**/*.html,**/*.xm.html</filePattern>
					<filterExtension>.xm.html</filterExtension>
					<targetDirectory>${project.build.directory}/generated-site/resources</targetDirectory>
				</configuration>
			</plugin>
		</plugins>
		<extensions>
			<extension>
				<groupId>org.apache.maven.scm</groupId>
				<artifactId>maven-scm-provider-gitexe</artifactId>
				<version>1.3</version>
			</extension>
			<extension>
				<groupId>org.apache.maven.scm</groupId>
				<artifactId>maven-scm-manager-plexus</artifactId>
				<version>1.3</version>
			</extension>
			<extension>
				<groupId>org.kathrynhuxtable.maven.wagon</groupId>
				<artifactId>wagon-gitsite</artifactId>
				<version>0.2</version>
			</extension>
		</extensions>
	</build>
	<reporting>
		<plugins>
			<!-- Generate the following standard project reports. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.1.2</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>summary</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>dependency-management</report>
							<report>project-team</report>
							<report>issue-tracking</report>
							<report>mailing-list</report>
							<report>plugin-management</report>
							<report>plugins</report>
							<report>license</report>
							<report>scm</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<requirements>
						<jdk>1.5</jdk>
					</requirements>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
	<profiles>
		<profile>
			<id>site</id>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.kathrynhuxtable.maven.plugins</groupId>
							<artifactId>htmlfilter-site-maven-plugin</artifactId>
							<version>${project.version}</version>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<!--
						Configure the docbkx plugin, which is a more fully featured DocBook converter than the one
						included in Doxia. In particular, it does language-based syntax highlighting in programlisting
						elements. This is run in the pre-site phase and generates its output to the html directory of
						the generated site directory.
					-->
					<plugin>
						<groupId>com.agilejava.docbkx</groupId>
						<artifactId>docbkx-maven-plugin</artifactId>
						<version>2.0.10</version>
						<executions>
							<execution>
								<goals>
									<goal>generate-xhtml</goal>
								</goals>
								<phase>pre-site</phase>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>net.sf.docbook</groupId>
								<artifactId>docbook-xml</artifactId>
								<version>5.0-all</version>
								<classifier>resources</classifier>
								<type>zip</type>
								<scope>runtime</scope>
							</dependency>
						</dependencies>
						<configuration>
							<chunkedOutput>false</chunkedOutput>
							<sourceDirectory>${basedir}/src/site/docbook</sourceDirectory>
							<includes>**/*.xml,**/*.xml.vm</includes>
							<targetDirectory>${project.build.directory}/generated-site/docbook-xhtml</targetDirectory>
							<generateMetaAbstract>0</generateMetaAbstract>
							<highlightSource>1</highlightSource>
							<highlightDefaultLanguage />
							<htmlCustomization>${basedir}/src/site/xsl/html.xsl</htmlCustomization>
							<imgSrcPath>./</imgSrcPath>
							<htmlCellSpacing>2</htmlCellSpacing>
							<htmlCellPadding>2</htmlCellPadding>
							<suppressHeaderNavigation>1</suppressHeaderNavigation>
							<suppressFooterNavigation>1</suppressFooterNavigation>
							<tableBordersWithCss>true</tableBordersWithCss>
							<tableFrameBorderThickness>0</tableFrameBorderThickness>
							<tableCellBorderThickness>0</tableCellBorderThickness>
							<targetFileExtension>html</targetFileExtension>
							<!-- use extensions -->
							<useExtensions>1</useExtensions>
							<!-- callouts -->
							<calloutsExtension>1</calloutsExtension>
						</configuration>
					</plugin>
					<!--
						Configure the HTML Filter Site plugin. This runs *after* the docbkx plugin in the pre-site
						phase and runs Velocity on the files and makes them look more like Doxia-generated files
						without stripping all the useful DocBook formatting like Doxia does. It first runs JTidy to
						make the files XHTML-compliant. When version 2.0.10 of the docbkx plugin is released we can
						generate XHTML and won't need the "tidy" goal.
					-->
					<plugin>
						<groupId>org.kathrynhuxtable.maven.plugins</groupId>
						<artifactId>htmlfilter-site-maven-plugin</artifactId>
						<version>${project.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>tidy</goal>
									<goal>merge</goal>
								</goals>
								<phase>pre-site</phase>
							</execution>
						</executions>
						<configuration>
							<tidySourceDirectory>${project.build.directory}/generated-site/html</tidySourceDirectory>
							<tidyTargetDirectory>${project.build.directory}/generated-site/tidy</tidyTargetDirectory>
							<tidyFilePattern>**/*.html,**/*.xm.html</tidyFilePattern>

							<sourceDirectory>${project.build.directory}/generated-site/tidy</sourceDirectory>
							<filePattern>**/*.html,**/*.xm.html</filePattern>
							<filterExtension>.xm.html</filterExtension>
							<targetDirectory>${project.build.directory}/generated-site/resources</targetDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--
			Define the profile to be activated when performing a release. This makes sure all the
			deliverables are signed with GPG.
		-->
		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.0</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<useAgent>true</useAgent>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<properties>
		<!-- Define the default encoding. We want this to be platform independent. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
</project>
